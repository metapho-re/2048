import { afterAll, beforeAll, describe, expect, test, vi } from "vitest";
import { isDefeat } from "./checkDefeat";

describe("isDefeat", () => {
  beforeAll(() => {
    vi.mock("./queries.ts", () => ({}));
  });

  afterAll(() => {
    vi.restoreAllMocks();
  });

  test("game is not lost when there is an empty case", () => {
    expect(
      isDefeat([
        ["", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", ""],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", ""],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);
  });

  test("game is not lost when a merge move is possible", () => {
    expect(
      isDefeat([
        ["2", "2", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["2", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "4", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["4", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "32", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "32"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "16", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);

    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "16"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(false);
  });

  test("game is lost when no move is possible", () => {
    expect(
      isDefeat([
        ["2", "4", "8", "16"],
        ["32", "64", "128", "256"],
        ["512", "1024", "2048", "2"],
        ["4", "8", "16", "32"],
      ])
    ).toBe(true);
  });
});
